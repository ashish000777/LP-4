#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

// Structure for an item which stores weight and corresponding value of Item
struct Item {
    int profit, weight;

    // Constructor
    Item(int profit, int weight) {
        this->profit = profit;
        this->weight = weight;
    }
};

// Comparison function to sort Item according to profit/weight ratio
static bool cmp(struct Item a, struct Item b) {
    double r1 = (double)a.profit / (double)a.weight;
    double r2 = (double)b.profit / (double)b.weight;
    return r1 > r2;
}

// Main greedy function to solve the problem
double fractionalKnapsack(int W, vector<Item> &arr) {
    // Sorting Item on the basis of ratio
    sort(arr.begin(), arr.end(), cmp);

    double finalvalue = 0.0;

    // Looping through all items
    for (int i = 0; i < arr.size(); i++) {
        // If adding the Item won't overflow, add it completely
        if (arr[i].weight <= W) {
            W -= arr[i].weight;
            finalvalue += arr[i].profit;
        } else { // If we can't add the current Item, add the fractional part of it
            finalvalue += arr[i].profit * ((double)W / (double)arr[i].weight);
            break;
        }
    }

    // Returning the final value
    return finalvalue;
}

int main() {
    int W, N;

    cout << "Enter the knapsack capacity (W): ";
    cin >> W;

    cout << "Enter the number of items (N): ";
    cin >> N;

    vector<Item> arr;
    cout << "Enter the profit and weight of each item:" << endl;
    for (int i = 0; i < N; i++) {
        int profit, weight;
        cin >> profit >> weight;
        arr.push_back(Item(profit, weight));
    }

    // Function call
    double result = fractionalKnapsack(W, arr);
    cout << "Maximum value that can be obtained: " << result << endl;

    return 0;
}
